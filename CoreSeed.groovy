Object createJob(String value) {
    return pipelineJob(value) {
        parameters {
            stringParam("CONFIG", "", "Config file within the repository.")
            stringParam("UNIQUE_ID", "nonUniqueID", "Set id for tracking.")
            choiceParam("TRIGGERED_BY", ['User', 'PR_Sanity', 'Dingo', 'Night_Run', 'Parallel', 'PR-Builder'], "For added steps during pipeline exeuction.")
            stringParam("RELEASE_NUMBER", "", "Release number supported by xpool install command<")
            stringParam("RELEASE_NUMBER_HCI", "", "Release number for hci supported by xpool install command")
            stringParam("PACKAGE_URL", "", "PACKAGE_URL support.")
            stringParam("IBID", "", "ibid support.")
            stringParam("UPGRADE_FROM", "", "")
            stringParam("CYC_TEST", "", "")
            stringParam("RIPTIDE_FIRMWARE", "", "")
            stringParam("PROGRAM_BRANCH", "", "")
            stringParam("FLAVOR", "", "")
            stringParam("TRIDENT_VERSION", "", "For BPT.")
            stringParam("BRANCH_OWNER", "", "For BPT.")
            booleanParam("SKIP_INSTALL", false, "Set to true if you want to skip installation part of the test.")
            stringParam("XPOOL_LEASE_USER", "jenkins-dev", "User to lease the cluster on (or the owner of \'SPECIFIC_APPLIANCE\')")
            stringParam("XPOOL_GROUPS_OVERRIDE", "", "Override for xpoolGroups (separated by comma)")
            stringParam("XPOOL_CLIENT_OVERRIDE", "", "Override for XPOOL_CLIENT (prd/stg/dev)")
            stringParam("INSTALL_TYPE_OVERRIDE", "", "Override for install type generated by pre_post (1 - AutoInstall, 2 - Reinit)")
            stringParam("SPECIFIC_APPLIANCE", "", "Configs will run on specific appliance (make sure you set XPOOL_LEASE_USER)")
            choiceParam("KEEP_APPLIANCE_FOR_INVESTIGATION", ['No', 'Yes', 'Only_On_Failure'], "Set if you want to keep appliance for investigation (not yet implemented).")
            stringParam("RECIPIENTS_MAIL", "", "Update via email.")
            booleanParam("UPDATE_GITHUB", false, "Set to true if you want to update github checker - if set, make sure all the below git params are set.")
            stringParam("GIT_PR_ID", "", "")
            stringParam("GIT_COMMIT", "", "(May be skipped if GIT_PR_ID is set)")
            stringParam("GIT_PR_LINK", "", "")
            stringParam("GIT_PR_TITLE", "", "")
            stringParam("GIT_PR_SOURCE_BRANCH", "", "")
            stringParam("GIT_PR_TARGET_BRANCH", "", "")
            stringParam("GIT_PR_ACTUAL_COMMIT", "", "")
            stringParam("GIT_PR_MERGE_COMMIT", "", "")
            stringParam("GIT_PR_REPO_URL", "", "")
            stringParam("GIT_PR_REPO_FULL_NAME", "", "")
            stringParam("GIT_PR_AUTHOR_EMAIL", "", "")
            stringParam("GIT_PR_AUTHOR_LOGIN", "", "")
            stringParam("GH_PR_STATUS", "", "")
            stringParam("PR_SANITY_FLAGS", "", "")
            stringParam("PR_SANITY_RETRY", "", "")
            booleanParam("IS_DINGO_PROD", false, "For Dingo.")
            stringParam("DINGO_SRV", "", "For Dingo.")
            stringParam("EXPORTS", "", "(Advanced - additional exports)")
            stringParam("CONFIG_BRANCH", "master", "Branch to checkout from.")
            stringParam("CONFIG_REPO", "git@eos2git.cec.lab.emc.com:Devops/tridevlab.git", "Repository to load from.")
            stringParam("BUILD_CONTEXT_FILE", "", "Temp workaround for passing buildContext.json file from build to test")
            stringParam("DOCKER_IMAGE", "", "For controlpath, etc.")
            stringParam("BUILD_NUMBER", "", "BUILD_NUMBER.")
            stringParam("QAENV", "/home/trqa", "QAENV")
            stringParam("REPORT_PR_ID", "", "")
            stringParam("REPORT_REPO_FULL_NAME", "", "")
            stringParam("REPORT_COMMIT", "Devops/tridevlab", "")
            stringParam("BEFORE_COMMIT", "", "BEFORE_COMMIT")
            stringParam("REUSE_WS_CONFIG", "", "REUSE_WS_CONFIG")
            stringParam("UNIQUE_ID_REUSE_WS", "", "UNIQUE_ID_REUSE_WS")
            stringParam("RUN_CONFIG_LIST", "", "List of [{...}, {...}]")
            stringParam("VTRIDENT_DEPLOY", "", "")
            stringParam("CORES_JOB_BASE_NAME", "${CORES_JOB_BASE_NAME}", "")
            stringParam("NUMBER_OF_CORE_JOBS", "${NUMBER_OF_CORE_JOBS}", "")
        }

        definition {
            cpsScm {
                scm {
                    git {
                    remote {
                        url('git@eos2git.cec.lab.emc.com:Devops/tridevlab.git')
                        }
                            branch('${CONFIG_BRANCH}')
                        }
                    scriptPath('pipelines/Core_Template.groovy')
                }
            }
    
            configure {
                it / 'properties' / 'jenkins.model.BuildDiscarderProperty' {
                    strategy {
                        'daysToKeep'('15')
                        'numToKeep'('300')
                        'artifactDaysToKeep'('10')
                        'artifactNumToKeep'('-1')
                    }
                }
            }
        }
    }
}

if (CORES_JOB_BASE_NAME.contains('/')) {
    String parentDirectory = CORES_JOB_BASE_NAME.substring(0,CORES_JOB_BASE_NAME.lastIndexOf('/'))
    folder(parentDirectory) {
    }
}


Integer number = NUMBER_OF_CORE_JOBS as Integer

for (i = 0; i <number; i++) {
   createJob(CORES_JOB_BASE_NAME+"_"+i)
}